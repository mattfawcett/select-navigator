// Generated by CoffeeScript 1.3.3
(function() {

  describe('selectNavigator', function() {
    var navigator, select;
    select = void 0;
    navigator = void 0;
    beforeEach(function() {
      select = $('<select id="animal-select"></select>');
      select.append('<option value="/dog" data-method="post">Dog</option>');
      select.append('<option value="/lion" data-method="put">Lion</option>');
      select.append('<option value="/cat">Cat</option>');
      select.selectNavigator();
      return navigator = select.data('select-navigator');
    });
    describe('changing the select', function() {
      beforeEach(function() {
        spyOn(navigator, 'doRedirect').andCallFake(function() {});
        return spyOn(navigator, 'doFormSubmission').andCallFake(function() {});
      });
      it('should handle simple GET requests', function() {
        select.val('/cat').trigger('change');
        return expect(navigator.doRedirect).toHaveBeenCalledWith('/cat');
      });
      return it('should handle POST and other requests', function() {
        select.val('/lion').trigger('change');
        select.trigger('change');
        return expect(navigator.doFormSubmission).toHaveBeenCalledWith('/lion', 'put');
      });
    });
    describe('buildForm', function() {
      it('should handle simple post forms', function() {
        var form;
        form = navigator.buildForm('/mypath', 'post');
        expect(form.attr('action')).toEqual('/mypath');
        expect(form.attr('method')).toEqual('post');
        return expect(form.find('input[name="_method"]').length).toEqual(0);
      });
      it('should create a hidden field for method if anything other than POST', function() {
        var form;
        form = navigator.buildForm('/mypath', 'put');
        expect(form.attr('action')).toEqual('/mypath');
        expect(form.attr('method')).toEqual('post');
        return expect(form.find('input[name=\'_method\']').val()).toEqual('put');
      });
      return it('should include a hidden field for the csrf token if present', function() {
        var form;
        form = navigator.buildForm('/mypath', 'put');
        return expect(form.find('input[name="authenticity_token"]').val()).toEqual('4uzs798NiSsv3e/OfbtSC/0Adt/ACW3WyA8WVWMG3O8=');
      });
    });
    describe('doFormSubmission', function() {
      return it('should build a form and submit it', function() {
        var form;
        form = navigator.buildForm('/mypath', 'put');
        spyOn(navigator, 'buildForm').andReturn(form);
        spyOn(form, 'submit').andCallFake(function() {});
        navigator.doFormSubmission('/mypath', 'put');
        expect(navigator.buildForm).toHaveBeenCalledWith('/mypath', 'put');
        return expect(form.submit).toHaveBeenCalled();
      });
    });
    describe('csrfParamName', function() {
      return it('should return the value from the meta tag if there is one', function() {
        return expect(navigator.csrfParamName()).toEqual('authenticity_token');
      });
    });
    return describe('csrfToken', function() {
      return it('should return the value from the meta tag if there is one', function() {
        return expect(navigator.csrfToken()).toEqual('4uzs798NiSsv3e/OfbtSC/0Adt/ACW3WyA8WVWMG3O8=');
      });
    });
  });

}).call(this);
